	Pentru ca id-ul sa fie unic pentru fiecare thread, cand un fir de executie acceseaza metoda threadId.get() trebuie sa blocam accesul celorlalte thread-uri ca sa putem asocia un id unui thread, apoi sa il incrementam corect inainte ca altui thread sa ii fie asociat acelasi id din cauza ca nu a avut timp sa fie incrementat.
	Astfel, se creaza un decalaj pentru ca fiecare thread trebuie sa il astepte pe cel anterior, deci cand al k+1-lea thread modifica variabila me (me=k+1), al k-lea thread deja va fi setat variabila last cu id-ul sau (last=k); cand al k+2-lea thread modifica variabila me (me=k+2), al k+1-lea thread deja va fi setat variabila last cu id-ul sau (last=k+1) si tot asa pana la ultimul thread n care modifica variabila me (me=n) dupa ce penultimul thread n-1 a modificat deja variabila last (last=n-1), astfel cand ultimul thread ajunge sa modifice variabila last(last=n) nu mai are cine sa modifice variabila me, deci cand ajunge la operatia if(last==me), last si me vor fi amandoua egale cu id-ul sau(n, ultimul thread); acesta este singurul caz in care last si me au aceeasi valoare, deci daca thread-urile trec de conditia if(getWhite==true) va fi exact un singur thread care returneaza "red", restul vor merge toate pe ramura else returnand "black".
	Cu alte cuvinte maxim un thread poate obtine valoarea "red", iar maxim n-1 thread-uri pot obtine valoarea "black".
(am atasat o imagine care reprezinta grafic cum arata decalarea thread-urilor)